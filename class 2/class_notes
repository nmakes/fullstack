=======
CLASS 2
=======


* npm: node package manager
	- reads package.json and installs in the node modules
	- Node is very low level and we need to install packages for functionality

* express: handles request sending
	$ npm install express -g

* express-generaor:
	$ npm install express-generator -g

* Creating the first application

	$ express myapp
	$ cd myapp
	$ npm install # the details are in package.json
	$ npm start

	Now open myapp.js and look at the contents

	Server is hosted at localhost:3000

	index.html should be put in ./public/ folder

* Create a simple form in index.html

* myapp/routes/index.js

	router.get('/', function(req, res, next) {
	  res.render('index', { title: 'Express' });
	});

	Here req is the request
	res is the response that we will send
	/ is localhost:3000/

	- change get to post for the form
	- delete: res.render line
	- write: res.send("Form Received");

* myapp/public/index.html

	<form action = "/" method = "post"> ... </form>

	- set form action, method

	Two types of requests:
		- get: puts all form data in the URL itself
		- post: doesn't do that. it puts in a 'body object' and gives that body object to the server
	The request sending is the same however.

* What is happening?

	- when we go to localhost:3000, the server gets a 'get' request at '/'
	- it searches the public directory and gives it back to browser
	- the moment the form is submitted, the method post is called
	- browser generates a request using post
	- using the fields the data is taken and a request is generated
	- router.post will intercept a post request and throws a response saying "Received a cold form"

* try this:

	router.get('/', function(req, res, next) {
		res.send(req.body); <!-- write this -->
	});
